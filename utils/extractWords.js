/**
 * Created by yangm11 on 12/20/2018.
 */
'use strict';

const AA = "ARNDCEQGHILKMFPSTWYV";
const DNA = 'ATGC';

class Dict {
  constructor(n=3, type='protein') {
    this.len = n;
    if (typeof type !== 'string') {
      throw TypeError('Invalid type parameter.');
    }
    this.type = type;
    if (type === 'protein') {
      this.chars = AA;
    } else if (type === 'dna') {
      this.chars = DNA;
    }
    this.originalSeq = '';
    this.seq = '';
  }
  scan(s) {
    if (typeof s !== 'string') {
      console.log(typeof s);
      throw new TypeError('A string expected.');
    }
    s = this.rinse(s);
    let m = new Set();
    for (let i = 0; i < s.length - this.len + 1; i++) {
      m.add(s.slice(i, i+this.len));
    }
    this.words = [...m];
    return this.words;
  }
  rinse(s) {
    this.originalSeq = s;
    let res = '';
    s = s.toUpperCase();
    for (let i = 0; i < s.length; i++) {
      if (this.chars.indexOf(s[i]) !== -1) {
        res += s[i];
      } else {
        switch (s[i]) {
          case '\n':
            break;
          case '\t':
            break;
          case ' ':
            break;
          case '\r':
            break;
          case '\r\n':
            break;
          default:
            throw new Error('Bad character: ' + s[i]);
        }
      }
    }
    this.seq = res;
    return res;
  }
  report() {
    let total = 1;
    let n = this.type === 'protein' ? 20 : 4;
    for (let i = 0; i < this.len; i++) {
      total *= n;
    }
    return {
      lengthOfSequence: this.seq.length,
      numberOfWords: this.words.length,
      numberOfAllPossible: total,
      ratio: this.words.length / total
    };
  }
}

// test code or run as executable
function main() {
  let gene = `AGGACTGCAGTCGGCCGAAGCTGAAGGAAGAACTTGAGCGTGAGGAGCTCGAGTGATTGGCTGACTGGGA
ACTCGGGCGCCAATATGGCGTTTGTAGCAGGAGTTATTCGGCGTCTGGACGAGACGGTAGTGAACCGCAT
AGCGGCGGGGGAAGTCATTCAGCGGCCGGCCAATGCTATCAAAGAGATGATAGAAAACTGATGCAAAATC
TACAAATATTCAAGTGGTTGTTAAGGAAGGTGGCCTGAAGCTAATTCAGATCCAAGACAATGGCACTGGA
ATCAGGAAGGAAGATCTGGATATTGTGTGTGAGAGGTTCACTACGAGTAAACTGCAGACTTTTGAGGATT
TAGCCAGTATTTCTACCTATGGCTTTCGTGGTGAGGCATTGGCAAGCATAAGCCATGTGGCCCATGTCAC
TATTACAACCAAAACAGCTGATGGGAAATGTGCGTACAGAGCAAGTTACTCAGATGGAAAGCTGCAAGCC
CCTCCTAAACCCTGTGCAGGCAACCAGGGCACCCTGATCACGGTGGAAGACCTTTTTTACAACATAATCA
CAAGGAGGAAAGCTTTAAAAAATCCAAGTGAAGAGTACGGAAAAATTTTGGAAGTTGTTGGCAGGTATTC
AATACACAATTCAGGCATTAGTTTCTCAGTTAAAAAACAAGGTGAGACAGTATCTGATGTCAGAACACTG
CCCAATGCCACAACCGTGGACAACATTCGCTCCATCTTTGGAAATGCGGTTAGTCGAGAACTGATAGAAG
TTGGGTGTGAGGATAAAACCCTAGCTTTCAAAATGAATGGCTATATATCGAATGCAAACTATTCAGTGAA
GAAGTGCATTTTCCTACTCTTCATCAACCACCGTCTGGTAGAATCAGCTGCCTTGAGAAAAGCCATTGAA
ACTGTATATGCAGCATACTTGCCCAAAAACACACACCCATTCCTGTACCTCAGTTTGGAAATCAGCCCTC
AGAACGTGGACGTCAATGTACACCCCACCAAGCACGAAGTTCACTTTCTGCACGAGGAGAGCATTCTGCA
GCGTGTGCAGCAGCACATTGAGAGCAAGCTGCTGGGCTCCAATTCCTCCAGGATGTATTTCACCCAGACC
TTGCTTCCAGGACTTGCTGGGCCTTCTGGGGAGGCAGCTAGACCCACGACAGGGGTGGCTTCCTCATCCA
CTAGTGGAAGTGGCGACAAGGTCTACGCTTACCAGATGGTCCGTACGGACTCCCGGGAGCAGAAGCTTGA
CGCCTTTCTGCAGCCTGTAAGCAGCCTTGGGCCCAGCCAGCCCCAGGACCCTGCCCCTGTCCGAGGGGCC
AGGACGGAGGGATCTCCTGAAAGGGCCACGCGGGAGGACGAGGAGATGCTTGCTCTCCCAGCCCCCGCTG
AAGCAGCTGCTGAGAGTGAGAACTTGGAGAGGGAATCACTAATGGAGACTTCAGACGCAGCCCAGAAGGC
GGCACCCACTTCCAGTCCAGGAAGCTCCAGAAAGAGACATCGGGAGGACTCTGATGTGGAAATGGTGGAA
AATGCTTCCGGGAAGGAAATGACAGCTGCTTGCTACCCCAGGAGGAGGATCATTAACCTCACCAGCGTCT
TGAGTCTCCAGGAAGAGATTAGTGAGCGGTGCCATGAGACTCTCCGGGAGATGCTCCGTAACCATTCCTT
TGTGGGCTGTGTGAATCCTCAGTGGGCCTTGGCACAGCACCAGACCAAGCTCTACCTCCTCAACACTACC
AAGCTCAGTGAAGAGCTGTTCTACCAGATACTCATTTATGATTTTGCCAACTTTGGTGTTCTGAGGTTAT
CGGAACCAGCGCCACTCTTCGACCTGGCCATGCTGGCCTTAGACAGTCCTGAAAGTGGCTGGACAGAGGA
CGACGGCCCGAAGGAAGGGCTTGCAGAGTACATTGTTGAGTTTCTGAAGAAGAAAGCGGAGATGCTTGCA
GACTATTTCTCTGTGGAGATCGATGAGGAAGGGAACCTGATTGGATTACCTCTTCTGATTGACAGCTATG
TGCCACCTTTGGAGGGACTGCCTATCTTCATTCTTCGACTGGCCACTGAGGTGAATTGGGATGAAGAAAA
GGAGTGTTTTGAAAGTCTCAGTAAAGAATGTGCTATGTTTTACTCCATTCGGAAGCAGTATATACTGGAG
GAGTCGACCCTCTCAGGCCAGCAGAGTGACATGCCTGGCTCCACGTCAAAGCCCTGGAAGTGGACTGTGG
AGCACATTATCTATAAAGCCTTCCGCTCACACCTCCTACCTCCGAAGCATTTCACAGAAGATGGCAATGT
CCTGCAGCTTGCCAACCTGCCAGATCTATACAAAGTCTTTGAGCGGTGTTAAATACAATCATAGCCACCG
TAGAGACTGCATGACCATCCAAGGCGAAGTGTATGGTACTAATCTGGAAGCCACAGAATAGGACACTTGG
TTTCCAAGCTCCAGGGTTTCCAGTGCTCACTATTCTTGTTCTGTATCCCAGTATTGGTGCTGCAACTTAA
TGTACTTCACCTGTGGATTGGCTGCAAATAAACTCACGTGTATTGGTGTGATTTTTTTTTTTTATATAAC
CGC`;

  let pr = `MNGYISNANYSVKKCIFLLFINHRLVESAALRKAIETVYAAYLPKNTHPFLYLSLEISPQNVDVNVHPTK
HEVHFLHEESILQRVQQHIESKLLGSNSSRMYFTQTLLPGLAGPSGEAARPTTGVASSSTSGSGDKVYAY
QMVRTDSREQKLDAFLQPVSSLGPSQPQDPAPVRGARTEGSPERATREDEEMLALPAPAEAAAESENLER
ESLMETSDAAQKAAPTSSPGSSRKRHREDSDVEMVENASGKEMTAACYPRRRIINLTSVLSLQEEISERC
HETLREMLRNHSFVGCVNPQWALAQHQTKLYLLNTTKLSEELFYQILIYDFANFGVLRLSEPAPLFDLAM
LALDSPESGWTEDDGPKEGLAEYIVEFLKKKAEMLADYFSVEIDEEGNLIGLPLLIDSYVPPLEGLPIFI
LRLATEVNWDEEKECFESLSKECAMFYSIRKQYILEESTLSGQQSDMPGSTSKPWKWTVEHIIYKAFRSH
LLPPKHFTEDGNVLQLANLPDLYKVFERC`;

  let d = new Dict(3, 'dna');
  d.scan(gene);
  console.log(d.report());

  let d1 = new Dict(3);
  d1.scan(pr);
  console.log(d1.report());
}

if (typeof window === 'object') {
  // Browser environment

} else if (typeof module !== 'undefined') {
  // Node environment, 
  if (module.parent) {
    // required as module

  } else {
    // run as executable
    main();
  }
}